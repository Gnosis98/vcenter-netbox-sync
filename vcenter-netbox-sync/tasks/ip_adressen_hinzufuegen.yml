---
# 1. Hole alle VMs aus vCenter
- name: "Hole alle VMs aus vCenter"
  community.vmware.vmware_vm_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
  register: vms

# 2. Debug - Zeige die geladenen VMs (nur einmal)
#- name: "Debug - Prüfe, ob VMs aus vCenter geladen wurden"
#  debug:
#    var: vms.virtual_machines
#  run_once: true

# 3. Erstelle eine leere Liste für IP-Adressen
- name: "Erstelle eine Liste für IP-Adressen"
  set_fact:
    ip_addresses: []

# 4. Für jede VM: Ergänze die VM-Daten um ein umgewandeltes vm_network-Dictionary (als Liste)
- name: "Ergänze VM Daten mit vm_network_dict"
  set_fact:
    vm_list: "{{ vm_list | default([]) + [ item | combine({'vm_network_dict': (item.vm_network | default({}) | dict2items) }) ] }}"
  loop: "{{ vms.virtual_machines }}"

- name: "Setze vms.virtual_machines neu"
  set_fact:
    vms:
      virtual_machines: "{{ vm_list }}"

# 5. Erstelle eine Zwischensammlung aller Interfaces, die mindestens eine IPv4-Adresse besitzen
- name: "Extrahiere Interfaces mit IPv4-Adressen"
  set_fact:
    interfaces_with_ips: "{{ interfaces_with_ips | default([]) + [ {'vm_name': item.0.guest_name, 'mac': item.1.key, 'ipv4': item.1.value.ipv4 } ] }}"
  loop: "{{ query('subelements', vms.virtual_machines, 'vm_network_dict') }}"
  loop_control:
    loop_var: item
  when: item.1.value.ipv4 is defined and (item.1.value.ipv4 | length) > 0

# 6. Erstelle aus der Zwischensammlung die finale Liste: Für jedes Interface wird jede IPv4-Adresse als eigenen Eintrag erfasst
- name: "Extrahiere alle IPv4-Adressen aus Interfaces"
  set_fact:
    ip_addresses: "{{ ip_addresses + [ {'vm_name': item.0.vm_name, 'mac': item.0.mac, 'ip': item.1 } ] }}"
  loop: "{{ query('subelements', interfaces_with_ips, 'ipv4') }}"
  loop_control:
    loop_var: item

# 7. Debug - Zeige die ermittelten IP-Adressen (nur einmal)
- name: "Debug - Zeige die gefundenen IP-Adressen"
  debug:
    var: ip_addresses
  run_once: true

# 8. Prüfe für jede IP, ob sie in NetBox existiert
- name: "Prüfe, ob IPs in NetBox existieren"
  uri:
    url: "{{ netbox_url }}/api/ipam/ip-addresses/?address={{ item.ip }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ netbox_api_token }}"
    return_content: yes
    status_code: [200, 404]
    validate_certs: no
  loop: "{{ ip_addresses }}"
  register: existing_ips
  loop_control:
    loop_var: item

# 9. Debug - Zeige die in NetBox bereits vorhandenen IPs (nur einmal)
- name: "Debug - Zeige bestehende IPs in NetBox"
  debug:
    var: existing_ips.results
  run_once: true

# 10. Füge die fehlenden IP-Adressen in NetBox hinzu
- name: "IP-Adressen in NetBox hinzufügen"
  uri:
    url: "{{ netbox_url }}/api/ipam/ip-addresses/"
    method: POST
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ netbox_api_token }}"
    body_format: json
    body: >-
      {
        "address": "{{ item.ip }}",
        "status": "active"
      }
    status_code: [200, 201]
    validate_certs: no
  loop: "{{ ip_addresses }}"
  loop_control:
    loop_var: item
  when: >
    item.ip not in (existing_ips.results
                    | map(attribute='json')
                    | map(attribute='results')
                    | select('defined')
                    | flatten
                    | map(attribute='address')
                    | list)
  register: added_ips
  ignore_errors: yes
# 11. Debug - Zeige die neu hinzugefügten IPs (nur einmal)
- name: "Debug - Zeige neu hinzugefügte IPs"
  debug:
    var: added_ips
  run_once: true

