---
# 1. Hole das IP-Objekt für jede VM-IP (ohne Netzmaske)
- name: "Hole IP-Objekt für VM-IP (ohne Netzmaske)"
  uri:
    url: "{{ netbox_url }}/api/ipam/ip-addresses/?address={{ item.ip.split('/')[0] | urlencode }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ netbox_api_token }}"
    return_content: yes
    status_code: [200]
    validate_certs: no
  register: nb_ip_obj
  loop: "{{ ip_addresses }}"
  loop_control:
    label: "{{ item.vm_name }} (IP)"

# 2. Hole das Interface-Objekt aus NetBox für jede VM-IP (Filter: VM-Name und Interface-Name = MAC)
- name: "Hole Interface-Objekt für VM-IP"
  uri:
    url: "{{ netbox_url }}/api/virtualization/interfaces/?virtual_machine__name={{ item.vm_name | urlencode }}&name={{ item.mac | urlencode }}"
    method: GET
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ netbox_api_token }}"
    return_content: yes
    status_code: [200]
    validate_certs: no
  register: nb_interface_obj
  loop: "{{ ip_addresses }}"
  loop_control:
    label: "{{ item.vm_name }} (Interface)"

# 3. Kombiniere die Ergebnisse beider GET-Aufrufe (über den gleichen Index)
- name: "Kombiniere IP- und Interface-Objekte"
  set_fact:
    combined_ip_interfaces: "{{ combined_ip_interfaces | default([]) + [ {
       'ip_obj': nb_ip_obj.results[item_index],
       'interface_obj': nb_interface_obj.results[item_index],
       'vm_name': ip_addresses[item_index].vm_name,
       'ip': ip_addresses[item_index].ip
    } ] }}"
  loop: "{{ range(0, (ip_addresses | length)) | list }}"
  loop_control:
    index_var: item_index
    label: "{{ ip_addresses[item_index].vm_name }} ({{ ip_addresses[item_index].ip }})"

# 4. Weise das IP-Objekt in NetBox dem entsprechenden Interface zu (PATCH)
- name: "Weise IP dem Interface zu"
  uri:
    url: "{{ netbox_url }}/api/ipam/ip-addresses/{{ item.ip_obj.json.results[0].id }}/"
    method: PATCH
    headers:
      Content-Type: "application/json"
      Authorization: "Token {{ netbox_api_token }}"
    body_format: json
    body: >-
      {
         "assigned_object_type": "virtualization.vminterface",
         "assigned_object_id": {{ item.interface_obj.json.results[0].id }}
      }
    status_code: [200]
    validate_certs: no
  loop: "{{ combined_ip_interfaces }}"
  loop_control:
    label: "{{ item.vm_name }} ({{ item.ip }})"
  when: (item.ip_obj.json.results | length > 0) and (item.interface_obj.json.results | length > 0)
  ignore_errors: yes
